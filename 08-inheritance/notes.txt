inheritance
- used in i.e. making rpgs
- a class can be based on another class or it can extend another class
example in code

health is private in BaseChar and therefore you can't access it within Warrior
- you can fix by saying public int health
  - BUT you don't want health to be private
- or you could not use baseSetHealth and instead just setHealth that extends
  into Warrior
you can think of this as levels
- superclass : private int health
               public int setHealth
- subclass : (has own things)
             i.e. private int healthBoost
- subclass has access to public items in superclass

if you call a public method in the superclass, it can access private stuff on
its level
- c.setHealth(150) accesses health on BaseChar level
- w.setHealth(200) accesses health on Warrior level

there's no getHealth in Warrior and therefore the system calls BaseChar
- if you want to use a method in a subclass, you must have that method in the
  subclass or else it will go to the superclass

suppose we want to get the health of the superclass
- if you're in a subclass, subclasses can access superclass public stuff via
  super._____()

when the subclass has a method of the same name as the superclass, it's
called overriding
- use super to get to the superclass method or variable
- vs. overloading = multiple methods, same name, different signature and
  parameter types

most problems with java won't need inheritance because you could just make
new classes

if you have a method in the subclass and not in the superclass, you can only
use it in the subclass !!

Mage under baseChar has getHealth and adds getMana
- however, if you only have a baseChar, it can use getHealth but can't use
  getMana

casting - tells Java to look at c which is a BaseChar as a Mage for the purposes
	  of the assignment

this._____ refers to the instance of the class you're using
- c1.setName("abc"); 	 	     	 c2.setName("xyz");
  this.name				 this.name
  (c1's instance variable name)		 (c2's instance variable name)

baseChar other - anything that is another baseChar I am going to attack

to String is automatically called when you put a class instance in a String
